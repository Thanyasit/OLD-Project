CCS PCM C Compiler, Version 4.049, 25917               20-ат.б.-16 11:27

               Filename: LAB041-LCD.lst

               ROM used: 489 words (6%)
                         Largest free fragment is 2048
               RAM used: 60 (16%) at main() level
                         70 (19%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CE
0003:  NOP
.................... #include "D:\Work T.Pongsak\Microcontroller\Work\LAB041-LCD\LAB041-LCD.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES WRT_50%               	//Lower half of Program Memory is Write Protected 
....................  
.................... #use delay(clock=20000000) 
....................  
....................  
.................... #use delay (clock=20M) 
000C:  MOVLW  57
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETLW  00
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0030:  MOVLW  F0
0031:  BSF    03.5
0032:  MOVWF  08
....................       lcd.rw = 1; 
0033:  BCF    03.5
0034:  BSF    08.2
....................       delay_cycles(1); 
0035:  NOP
....................       lcd.enable = 1; 
0036:  BSF    08.0
....................       delay_cycles(1); 
0037:  NOP
....................       high = lcd.data; 
0038:  MOVF   08,W
0039:  SWAPF  08,W
003A:  ANDLW  0F
003B:  MOVWF  5E
....................       lcd.enable = 0; 
003C:  BCF    08.0
....................       delay_cycles(1); 
003D:  NOP
....................       lcd.enable = 1; 
003E:  BSF    08.0
....................       delay_us(1); 
003F:  GOTO   040
0040:  GOTO   041
0041:  NOP
....................       low = lcd.data; 
0042:  MOVF   08,W
0043:  SWAPF  08,W
0044:  ANDLW  0F
0045:  MOVWF  5D
....................       lcd.enable = 0; 
0046:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0047:  MOVLW  00
0048:  BSF    03.5
0049:  MOVWF  08
....................       return( (high<<4) | low); 
004A:  BCF    03.5
004B:  SWAPF  5E,W
004C:  MOVWF  77
004D:  MOVLW  F0
004E:  ANDWF  77,F
004F:  MOVF   77,W
0050:  IORWF  5D,W
0051:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0020:  SWAPF  5E,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  08,W
0025:  IORWF  77,W
0026:  MOVWF  08
....................       delay_cycles(1); 
0027:  NOP
....................       lcd.enable = 1; 
0028:  BSF    08.0
....................       delay_us(2); 
0029:  MOVLW  03
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
....................       lcd.enable = 0; 
002D:  BCF    08.0
.................... } 
002E:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
002F:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0052:  MOVF   78,W
0053:  MOVWF  5D
0054:  BTFSC  5D.7
0055:  GOTO   030
....................       lcd.rs = address; 
0056:  BTFSS  5B.0
0057:  BCF    08.1
0058:  BTFSC  5B.0
0059:  BSF    08.1
....................       delay_cycles(1); 
005A:  NOP
....................       lcd.rw = 0; 
005B:  BCF    08.2
....................       delay_cycles(1); 
005C:  NOP
....................       lcd.enable = 0; 
005D:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
005E:  SWAPF  5C,W
005F:  MOVWF  5D
0060:  MOVLW  0F
0061:  ANDWF  5D,F
0062:  MOVF   5D,W
0063:  MOVWF  5E
0064:  CALL   020
....................       lcd_send_nibble(n & 0xf); 
0065:  MOVF   5C,W
0066:  ANDLW  0F
0067:  MOVWF  5D
0068:  MOVWF  5E
0069:  CALL   020
.................... } 
006A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
006B:  MOVLW  00
006C:  BSF    03.5
006D:  MOVWF  08
....................     lcd.rs = 0; 
006E:  BCF    03.5
006F:  BCF    08.1
....................     lcd.rw = 0; 
0070:  BCF    08.2
....................     lcd.enable = 0; 
0071:  BCF    08.0
....................     delay_ms(15); 
0072:  MOVLW  0F
0073:  MOVWF  57
0074:  CALL   00C
....................     for(i=1;i<=3;++i) { 
0075:  MOVLW  01
0076:  MOVWF  55
0077:  MOVF   55,W
0078:  SUBLW  03
0079:  BTFSS  03.0
007A:  GOTO   083
....................        lcd_send_nibble(3); 
007B:  MOVLW  03
007C:  MOVWF  5E
007D:  CALL   020
....................        delay_ms(5); 
007E:  MOVLW  05
007F:  MOVWF  57
0080:  CALL   00C
....................     } 
0081:  INCF   55,F
0082:  GOTO   077
....................     lcd_send_nibble(2); 
0083:  MOVLW  02
0084:  MOVWF  5E
0085:  CALL   020
....................     for(i=0;i<=3;++i) 
0086:  CLRF   55
0087:  MOVF   55,W
0088:  SUBLW  03
0089:  BTFSS  03.0
008A:  GOTO   094
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
008B:  MOVF   55,W
008C:  CALL   004
008D:  MOVWF  56
008E:  CLRF   5B
008F:  MOVF   56,W
0090:  MOVWF  5C
0091:  CALL   02F
0092:  INCF   55,F
0093:  GOTO   087
.................... } 
0094:  BCF    0A.3
0095:  BCF    0A.4
0096:  GOTO   17A (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
0097:  DECFSZ 58,W
0098:  GOTO   09A
0099:  GOTO   09D
....................      address=lcd_line_two; 
009A:  MOVLW  40
009B:  MOVWF  59
....................    else 
009C:  GOTO   09E
....................      address=0; 
009D:  CLRF   59
....................    address+=x-1; 
009E:  MOVLW  01
009F:  SUBWF  57,W
00A0:  ADDWF  59,F
....................    lcd_send_byte(0,0x80|address); 
00A1:  MOVF   59,W
00A2:  IORLW  80
00A3:  MOVWF  5A
00A4:  CLRF   5B
00A5:  MOVF   5A,W
00A6:  MOVWF  5C
00A7:  CALL   02F
.................... } 
00A8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
00A9:  MOVF   56,W
00AA:  XORLW  0C
00AB:  BTFSC  03.2
00AC:  GOTO   0B4
00AD:  XORLW  06
00AE:  BTFSC  03.2
00AF:  GOTO   0BC
00B0:  XORLW  02
00B1:  BTFSC  03.2
00B2:  GOTO   0C2
00B3:  GOTO   0C7
....................      case '\f'   : lcd_send_byte(0,1); 
00B4:  CLRF   5B
00B5:  MOVLW  01
00B6:  MOVWF  5C
00B7:  CALL   02F
....................                    delay_ms(2); 
00B8:  MOVLW  02
00B9:  MOVWF  57
00BA:  CALL   00C
....................                                            break; 
00BB:  GOTO   0CD
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00BC:  MOVLW  01
00BD:  MOVWF  57
00BE:  MOVLW  02
00BF:  MOVWF  58
00C0:  CALL   097
00C1:  GOTO   0CD
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00C2:  CLRF   5B
00C3:  MOVLW  10
00C4:  MOVWF  5C
00C5:  CALL   02F
00C6:  GOTO   0CD
....................      default     : lcd_send_byte(1,c);     break; 
00C7:  MOVLW  01
00C8:  MOVWF  5B
00C9:  MOVF   56,W
00CA:  MOVWF  5C
00CB:  CALL   02F
00CC:  GOTO   0CD
....................    } 
.................... } 
00CD:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... void main() 
.................... { 
00CE:  CLRF   04
00CF:  BCF    03.7
00D0:  MOVLW  1F
00D1:  ANDWF  03,F
00D2:  BSF    03.5
00D3:  BSF    1F.0
00D4:  BSF    1F.1
00D5:  BSF    1F.2
00D6:  BCF    1F.3
00D7:  MOVLW  07
00D8:  MOVWF  1C
....................    char msg[]={'T','h','a','n','y','a','s','i','t'}; 
*
00DC:  MOVLW  54
00DD:  MOVWF  21
00DE:  MOVLW  68
00DF:  MOVWF  22
00E0:  MOVLW  61
00E1:  MOVWF  23
00E2:  MOVLW  6E
00E3:  MOVWF  24
00E4:  MOVLW  79
00E5:  MOVWF  25
00E6:  MOVLW  61
00E7:  MOVWF  26
00E8:  MOVLW  73
00E9:  MOVWF  27
00EA:  MOVLW  69
00EB:  MOVWF  28
00EC:  MOVLW  74
00ED:  MOVWF  29
....................    char msa[]={'A','k','k','a','r','a','n','a','r','a','t','h','i','w','a','t'}; 
00EE:  MOVLW  41
00EF:  MOVWF  2A
00F0:  MOVLW  6B
00F1:  MOVWF  2B
00F2:  MOVWF  2C
00F3:  MOVLW  61
00F4:  MOVWF  2D
00F5:  MOVLW  72
00F6:  MOVWF  2E
00F7:  MOVLW  61
00F8:  MOVWF  2F
00F9:  MOVLW  6E
00FA:  MOVWF  30
00FB:  MOVLW  61
00FC:  MOVWF  31
00FD:  MOVLW  72
00FE:  MOVWF  32
00FF:  MOVLW  61
0100:  MOVWF  33
0101:  MOVLW  74
0102:  MOVWF  34
0103:  MOVLW  68
0104:  MOVWF  35
0105:  MOVLW  69
0106:  MOVWF  36
0107:  MOVLW  77
0108:  MOVWF  37
0109:  MOVLW  61
010A:  MOVWF  38
010B:  MOVLW  74
010C:  MOVWF  39
....................    char msb[]={'5','8','3','1','0','5','0','0','2','4'}; 
010D:  MOVLW  35
010E:  MOVWF  3A
010F:  MOVLW  38
0110:  MOVWF  3B
0111:  MOVLW  33
0112:  MOVWF  3C
0113:  MOVLW  31
0114:  MOVWF  3D
0115:  MOVLW  30
0116:  MOVWF  3E
0117:  MOVLW  35
0118:  MOVWF  3F
0119:  MOVLW  30
011A:  MOVWF  40
011B:  MOVWF  41
011C:  MOVLW  32
011D:  MOVWF  42
011E:  MOVLW  34
011F:  MOVWF  43
....................    char mse[]={'I','n','d','u','s','t','r','i','a','l',' ','E','l','e','c','.'}; 
0120:  MOVLW  49
0121:  MOVWF  44
0122:  MOVLW  6E
0123:  MOVWF  45
0124:  MOVLW  64
0125:  MOVWF  46
0126:  MOVLW  75
0127:  MOVWF  47
0128:  MOVLW  73
0129:  MOVWF  48
012A:  MOVLW  74
012B:  MOVWF  49
012C:  MOVLW  72
012D:  MOVWF  4A
012E:  MOVLW  69
012F:  MOVWF  4B
0130:  MOVLW  61
0131:  MOVWF  4C
0132:  MOVLW  6C
0133:  MOVWF  4D
0134:  MOVLW  20
0135:  MOVWF  4E
0136:  MOVLW  45
0137:  MOVWF  4F
0138:  MOVLW  6C
0139:  MOVWF  50
013A:  MOVLW  65
013B:  MOVWF  51
013C:  MOVLW  63
013D:  MOVWF  52
013E:  MOVLW  2E
013F:  MOVWF  53
....................    int i; 
....................    setup_adc_ports(NO_ANALOGS); 
0140:  BSF    03.5
0141:  BSF    1F.0
0142:  BSF    1F.1
0143:  BSF    1F.2
0144:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0145:  BCF    03.5
0146:  BCF    1F.0
....................    setup_psp(PSP_DISABLED); 
0147:  BSF    03.5
0148:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
*
00D9:  MOVLW  FF
00DA:  BCF    03.5
00DB:  MOVWF  20
*
0149:  BCF    03.5
014A:  BCF    14.5
014B:  BCF    20.5
014C:  MOVF   20,W
014D:  BSF    03.5
014E:  MOVWF  07
014F:  BCF    03.5
0150:  BSF    20.4
0151:  MOVF   20,W
0152:  BSF    03.5
0153:  MOVWF  07
0154:  BCF    03.5
0155:  BCF    20.3
0156:  MOVF   20,W
0157:  BSF    03.5
0158:  MOVWF  07
0159:  MOVLW  01
015A:  BCF    03.5
015B:  MOVWF  14
015C:  MOVLW  00
015D:  BSF    03.5
015E:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
015F:  MOVF   01,W
0160:  ANDLW  C7
0161:  IORLW  08
0162:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0163:  BCF    03.5
0164:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0165:  MOVLW  00
0166:  MOVWF  78
0167:  MOVWF  12
0168:  MOVLW  00
0169:  BSF    03.5
016A:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
016B:  MOVLW  07
016C:  MOVWF  1C
016D:  MOVF   05,W
016E:  MOVLW  10
016F:  MOVWF  77
0170:  DECFSZ 77,F
0171:  GOTO   170
0172:  NOP
0173:  MOVF   1C,W
0174:  BCF    03.5
0175:  BCF    0D.6
....................    setup_vref(FALSE); 
0176:  BSF    03.5
0177:  CLRF   1D
....................  
....................    // TODO: USER CODE!! 
....................    while(1){ 
....................             lcd_init(); 
0178:  BCF    03.5
0179:  GOTO   06B
....................             lcd_gotoxy(5,1); 
017A:  MOVLW  05
017B:  MOVWF  57
017C:  MOVLW  01
017D:  MOVWF  58
017E:  CALL   097
....................             for(i=0;i<9;i++){ 
017F:  CLRF   54
0180:  MOVF   54,W
0181:  SUBLW  08
0182:  BTFSS  03.0
0183:  GOTO   191
....................                   delay_ms(250); 
0184:  MOVLW  FA
0185:  MOVWF  57
0186:  CALL   00C
....................                   lcd_putc(msg[i]); 
0187:  MOVLW  21
0188:  ADDWF  54,W
0189:  MOVWF  04
018A:  BCF    03.7
018B:  MOVF   00,W
018C:  MOVWF  55
018D:  MOVWF  56
018E:  CALL   0A9
....................             } 
018F:  INCF   54,F
0190:  GOTO   180
....................             lcd_gotoxy(1,2); 
0191:  MOVLW  01
0192:  MOVWF  57
0193:  MOVLW  02
0194:  MOVWF  58
0195:  CALL   097
....................             for(i=0;i<16;i++){ 
0196:  CLRF   54
0197:  MOVF   54,W
0198:  SUBLW  0F
0199:  BTFSS  03.0
019A:  GOTO   1A8
....................                   delay_ms(250); 
019B:  MOVLW  FA
019C:  MOVWF  57
019D:  CALL   00C
....................                   lcd_putc(msa[i]); 
019E:  MOVLW  2A
019F:  ADDWF  54,W
01A0:  MOVWF  04
01A1:  BCF    03.7
01A2:  MOVF   00,W
01A3:  MOVWF  55
01A4:  MOVWF  56
01A5:  CALL   0A9
....................             } 
01A6:  INCF   54,F
01A7:  GOTO   197
....................             delay_ms(2000); 
01A8:  MOVLW  08
01A9:  MOVWF  55
01AA:  MOVLW  FA
01AB:  MOVWF  57
01AC:  CALL   00C
01AD:  DECFSZ 55,F
01AE:  GOTO   1AA
....................             lcd_putc('\f'); 
01AF:  MOVLW  0C
01B0:  MOVWF  56
01B1:  CALL   0A9
....................             lcd_gotoxy(4,1); 
01B2:  MOVLW  04
01B3:  MOVWF  57
01B4:  MOVLW  01
01B5:  MOVWF  58
01B6:  CALL   097
....................             for(i=0;i<10;i++){ 
01B7:  CLRF   54
01B8:  MOVF   54,W
01B9:  SUBLW  09
01BA:  BTFSS  03.0
01BB:  GOTO   1C9
....................                   delay_ms(250); 
01BC:  MOVLW  FA
01BD:  MOVWF  57
01BE:  CALL   00C
....................                   lcd_putc(msb[i]); 
01BF:  MOVLW  3A
01C0:  ADDWF  54,W
01C1:  MOVWF  04
01C2:  BCF    03.7
01C3:  MOVF   00,W
01C4:  MOVWF  55
01C5:  MOVWF  56
01C6:  CALL   0A9
....................             } 
01C7:  INCF   54,F
01C8:  GOTO   1B8
....................             lcd_gotoxy(1,2); 
01C9:  MOVLW  01
01CA:  MOVWF  57
01CB:  MOVLW  02
01CC:  MOVWF  58
01CD:  CALL   097
....................             for(i=0;i<16;i++){ 
01CE:  CLRF   54
01CF:  MOVF   54,W
01D0:  SUBLW  0F
01D1:  BTFSS  03.0
01D2:  GOTO   1E0
....................                   delay_ms(250); 
01D3:  MOVLW  FA
01D4:  MOVWF  57
01D5:  CALL   00C
....................                   lcd_putc(mse[i]); 
01D6:  MOVLW  44
01D7:  ADDWF  54,W
01D8:  MOVWF  04
01D9:  BCF    03.7
01DA:  MOVF   00,W
01DB:  MOVWF  55
01DC:  MOVWF  56
01DD:  CALL   0A9
....................             } 
01DE:  INCF   54,F
01DF:  GOTO   1CF
....................             delay_ms(2000); 
01E0:  MOVLW  08
01E1:  MOVWF  55
01E2:  MOVLW  FA
01E3:  MOVWF  57
01E4:  CALL   00C
01E5:  DECFSZ 55,F
01E6:  GOTO   1E2
....................    } 
01E7:  GOTO   179
.................... } 
01E8:  SLEEP

Configuration Fuses:
   Word  1: 393A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD WRT_50%
