CCS PCM C Compiler, Version 4.049, 25917               21-ат.б.-16 07:59

               Filename: Assingment04.lst

               ROM used: 421 words (5%)
                         Largest free fragment is 2048
               RAM used: 22 (6%) at main() level
                         32 (9%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0CE
0003:  NOP
.................... #include "D:\Work T.Pongsak\Microcontroller\Work\Assingment04\Assingment04.h" 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES WRT_50%               	//Lower half of Program Memory is Write Protected 
....................  
.................... #use delay(clock=20000000) 
....................  
....................  
.................... #use delay (clock=20M) 
000C:  MOVLW  31
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETLW  00
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0030:  MOVLW  F0
0031:  BSF    03.5
0032:  MOVWF  08
....................       lcd.rw = 1; 
0033:  BCF    03.5
0034:  BSF    08.2
....................       delay_cycles(1); 
0035:  NOP
....................       lcd.enable = 1; 
0036:  BSF    08.0
....................       delay_cycles(1); 
0037:  NOP
....................       high = lcd.data; 
0038:  MOVF   08,W
0039:  SWAPF  08,W
003A:  ANDLW  0F
003B:  MOVWF  38
....................       lcd.enable = 0; 
003C:  BCF    08.0
....................       delay_cycles(1); 
003D:  NOP
....................       lcd.enable = 1; 
003E:  BSF    08.0
....................       delay_us(1); 
003F:  GOTO   040
0040:  GOTO   041
0041:  NOP
....................       low = lcd.data; 
0042:  MOVF   08,W
0043:  SWAPF  08,W
0044:  ANDLW  0F
0045:  MOVWF  37
....................       lcd.enable = 0; 
0046:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0047:  MOVLW  00
0048:  BSF    03.5
0049:  MOVWF  08
....................       return( (high<<4) | low); 
004A:  BCF    03.5
004B:  SWAPF  38,W
004C:  MOVWF  77
004D:  MOVLW  F0
004E:  ANDWF  77,F
004F:  MOVF   77,W
0050:  IORWF  37,W
0051:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0020:  SWAPF  38,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  08,W
0025:  IORWF  77,W
0026:  MOVWF  08
....................       delay_cycles(1); 
0027:  NOP
....................       lcd.enable = 1; 
0028:  BSF    08.0
....................       delay_us(2); 
0029:  MOVLW  03
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
....................       lcd.enable = 0; 
002D:  BCF    08.0
.................... } 
002E:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
002F:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0052:  MOVF   78,W
0053:  MOVWF  37
0054:  BTFSC  37.7
0055:  GOTO   030
....................       lcd.rs = address; 
0056:  BTFSS  35.0
0057:  BCF    08.1
0058:  BTFSC  35.0
0059:  BSF    08.1
....................       delay_cycles(1); 
005A:  NOP
....................       lcd.rw = 0; 
005B:  BCF    08.2
....................       delay_cycles(1); 
005C:  NOP
....................       lcd.enable = 0; 
005D:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
005E:  SWAPF  36,W
005F:  MOVWF  37
0060:  MOVLW  0F
0061:  ANDWF  37,F
0062:  MOVF   37,W
0063:  MOVWF  38
0064:  CALL   020
....................       lcd_send_nibble(n & 0xf); 
0065:  MOVF   36,W
0066:  ANDLW  0F
0067:  MOVWF  37
0068:  MOVWF  38
0069:  CALL   020
.................... } 
006A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
006B:  MOVLW  00
006C:  BSF    03.5
006D:  MOVWF  08
....................     lcd.rs = 0; 
006E:  BCF    03.5
006F:  BCF    08.1
....................     lcd.rw = 0; 
0070:  BCF    08.2
....................     lcd.enable = 0; 
0071:  BCF    08.0
....................     delay_ms(15); 
0072:  MOVLW  0F
0073:  MOVWF  31
0074:  CALL   00C
....................     for(i=1;i<=3;++i) { 
0075:  MOVLW  01
0076:  MOVWF  2F
0077:  MOVF   2F,W
0078:  SUBLW  03
0079:  BTFSS  03.0
007A:  GOTO   083
....................        lcd_send_nibble(3); 
007B:  MOVLW  03
007C:  MOVWF  38
007D:  CALL   020
....................        delay_ms(5); 
007E:  MOVLW  05
007F:  MOVWF  31
0080:  CALL   00C
....................     } 
0081:  INCF   2F,F
0082:  GOTO   077
....................     lcd_send_nibble(2); 
0083:  MOVLW  02
0084:  MOVWF  38
0085:  CALL   020
....................     for(i=0;i<=3;++i) 
0086:  CLRF   2F
0087:  MOVF   2F,W
0088:  SUBLW  03
0089:  BTFSS  03.0
008A:  GOTO   094
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
008B:  MOVF   2F,W
008C:  CALL   004
008D:  MOVWF  30
008E:  CLRF   35
008F:  MOVF   30,W
0090:  MOVWF  36
0091:  CALL   02F
0092:  INCF   2F,F
0093:  GOTO   087
.................... } 
0094:  BCF    0A.3
0095:  BCF    0A.4
0096:  GOTO   12D (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
0097:  DECFSZ 32,W
0098:  GOTO   09A
0099:  GOTO   09D
....................      address=lcd_line_two; 
009A:  MOVLW  40
009B:  MOVWF  33
....................    else 
009C:  GOTO   09E
....................      address=0; 
009D:  CLRF   33
....................    address+=x-1; 
009E:  MOVLW  01
009F:  SUBWF  31,W
00A0:  ADDWF  33,F
....................    lcd_send_byte(0,0x80|address); 
00A1:  MOVF   33,W
00A2:  IORLW  80
00A3:  MOVWF  34
00A4:  CLRF   35
00A5:  MOVF   34,W
00A6:  MOVWF  36
00A7:  CALL   02F
.................... } 
00A8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
00A9:  MOVF   30,W
00AA:  XORLW  0C
00AB:  BTFSC  03.2
00AC:  GOTO   0B4
00AD:  XORLW  06
00AE:  BTFSC  03.2
00AF:  GOTO   0BC
00B0:  XORLW  02
00B1:  BTFSC  03.2
00B2:  GOTO   0C2
00B3:  GOTO   0C7
....................      case '\f'   : lcd_send_byte(0,1); 
00B4:  CLRF   35
00B5:  MOVLW  01
00B6:  MOVWF  36
00B7:  CALL   02F
....................                    delay_ms(2); 
00B8:  MOVLW  02
00B9:  MOVWF  31
00BA:  CALL   00C
....................                                            break; 
00BB:  GOTO   0CD
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00BC:  MOVLW  01
00BD:  MOVWF  31
00BE:  MOVLW  02
00BF:  MOVWF  32
00C0:  CALL   097
00C1:  GOTO   0CD
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00C2:  CLRF   35
00C3:  MOVLW  10
00C4:  MOVWF  36
00C5:  CALL   02F
00C6:  GOTO   0CD
....................      default     : lcd_send_byte(1,c);     break; 
00C7:  MOVLW  01
00C8:  MOVWF  35
00C9:  MOVF   30,W
00CA:  MOVWF  36
00CB:  CALL   02F
00CC:  GOTO   0CD
....................    } 
.................... } 
00CD:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... void main() 
.................... { 
00CE:  CLRF   04
00CF:  BCF    03.7
00D0:  MOVLW  1F
00D1:  ANDWF  03,F
00D2:  BSF    03.5
00D3:  BSF    1F.0
00D4:  BSF    1F.1
00D5:  BSF    1F.2
00D6:  BCF    1F.3
00D7:  MOVLW  07
00D8:  MOVWF  1C
....................    char num[]={'1','2','3','4','5','6','7','8','9','0'}; 
*
00DC:  MOVLW  31
00DD:  MOVWF  21
00DE:  MOVLW  32
00DF:  MOVWF  22
00E0:  MOVLW  33
00E1:  MOVWF  23
00E2:  MOVLW  34
00E3:  MOVWF  24
00E4:  MOVLW  35
00E5:  MOVWF  25
00E6:  MOVLW  36
00E7:  MOVWF  26
00E8:  MOVLW  37
00E9:  MOVWF  27
00EA:  MOVLW  38
00EB:  MOVWF  28
00EC:  MOVLW  39
00ED:  MOVWF  29
00EE:  MOVLW  30
00EF:  MOVWF  2A
....................    int i,sw1,sw2,a; 
....................    setup_adc_ports(NO_ANALOGS); 
00F0:  BSF    03.5
00F1:  BSF    1F.0
00F2:  BSF    1F.1
00F3:  BSF    1F.2
00F4:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00F5:  BCF    03.5
00F6:  BCF    1F.0
....................    setup_psp(PSP_DISABLED); 
00F7:  BSF    03.5
00F8:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
*
00D9:  MOVLW  FF
00DA:  BCF    03.5
00DB:  MOVWF  20
*
00F9:  BCF    03.5
00FA:  BCF    14.5
00FB:  BCF    20.5
00FC:  MOVF   20,W
00FD:  BSF    03.5
00FE:  MOVWF  07
00FF:  BCF    03.5
0100:  BSF    20.4
0101:  MOVF   20,W
0102:  BSF    03.5
0103:  MOVWF  07
0104:  BCF    03.5
0105:  BCF    20.3
0106:  MOVF   20,W
0107:  BSF    03.5
0108:  MOVWF  07
0109:  MOVLW  01
010A:  BCF    03.5
010B:  MOVWF  14
010C:  MOVLW  00
010D:  BSF    03.5
010E:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
010F:  MOVF   01,W
0110:  ANDLW  C7
0111:  IORLW  08
0112:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
0113:  BCF    03.5
0114:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0115:  MOVLW  00
0116:  MOVWF  78
0117:  MOVWF  12
0118:  MOVLW  00
0119:  BSF    03.5
011A:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
011B:  MOVLW  07
011C:  MOVWF  1C
011D:  MOVF   05,W
011E:  MOVLW  10
011F:  MOVWF  77
0120:  DECFSZ 77,F
0121:  GOTO   120
0122:  NOP
0123:  MOVF   1C,W
0124:  BCF    03.5
0125:  BCF    0D.6
....................    setup_vref(FALSE); 
0126:  BSF    03.5
0127:  CLRF   1D
....................  
....................    // TODO: USER CODE!! 
....................    set_tris_c(0xb0); 
0128:  MOVLW  B0
0129:  MOVWF  07
012A:  BCF    03.5
012B:  MOVWF  20
....................    lcd_init(); 
012C:  GOTO   06B
....................    lcd_gotoxy(8,1); 
012D:  MOVLW  08
012E:  MOVWF  31
012F:  MOVLW  01
0130:  MOVWF  32
0131:  CALL   097
....................    lcd_putc(num[9]); 
0132:  MOVF   2A,W
0133:  MOVWF  30
0134:  CALL   0A9
....................    lcd_gotoxy(8,2); 
0135:  MOVLW  08
0136:  MOVWF  31
0137:  MOVLW  02
0138:  MOVWF  32
0139:  CALL   097
....................    lcd_putc(num[9]); 
013A:  MOVF   2A,W
013B:  MOVWF  30
013C:  CALL   0A9
....................    while(1){ 
....................             output_c(0x40); 
013D:  MOVLW  00
013E:  MOVWF  20
013F:  BSF    03.5
0140:  CLRF   07
0141:  MOVLW  40
0142:  BCF    03.5
0143:  MOVWF  07
....................             sw1 = input(PIN_C6); 
0144:  BSF    20.6
0145:  MOVF   20,W
0146:  BSF    03.5
0147:  MOVWF  07
0148:  BCF    03.5
0149:  CLRF   2C
014A:  BTFSC  07.6
014B:  INCF   2C,F
....................             delay_ms(100); 
014C:  MOVLW  64
014D:  MOVWF  31
014E:  CALL   00C
....................             if(sw1==0){ 
014F:  MOVF   2C,F
0150:  BTFSS  03.2
0151:  GOTO   170
....................                      lcd_gotoxy(8,1);      
0152:  MOVLW  08
0153:  MOVWF  31
0154:  MOVLW  01
0155:  MOVWF  32
0156:  CALL   097
....................                      lcd_putc(num[i]); 
0157:  MOVLW  21
0158:  ADDWF  2B,W
0159:  MOVWF  04
015A:  BCF    03.7
015B:  MOVF   00,W
015C:  MOVWF  2F
015D:  MOVWF  30
015E:  CALL   0A9
....................                      i++; 
015F:  INCF   2B,F
....................                      if(i==10){ 
0160:  MOVF   2B,W
0161:  SUBLW  0A
0162:  BTFSS  03.2
0163:  GOTO   165
....................                               i=0; 
0164:  CLRF   2B
....................                      } 
....................                      do{ 
....................                         sw1 = input(PIN_C6); 
0165:  BSF    20.6
0166:  MOVF   20,W
0167:  BSF    03.5
0168:  MOVWF  07
0169:  BCF    03.5
016A:  CLRF   2C
016B:  BTFSC  07.6
016C:  INCF   2C,F
....................                      }while(sw1==0); 
016D:  MOVF   2C,F
016E:  BTFSC  03.2
016F:  GOTO   165
....................             } 
....................             output_c(0x80); 
0170:  MOVLW  00
0171:  MOVWF  20
0172:  BSF    03.5
0173:  CLRF   07
0174:  MOVLW  80
0175:  BCF    03.5
0176:  MOVWF  07
....................             sw2 = input(PIN_C7); 
0177:  BSF    20.7
0178:  MOVF   20,W
0179:  BSF    03.5
017A:  MOVWF  07
017B:  BCF    03.5
017C:  CLRF   2D
017D:  BTFSC  07.7
017E:  INCF   2D,F
....................             delay_ms(100); 
017F:  MOVLW  64
0180:  MOVWF  31
0181:  CALL   00C
....................             if(sw2==0){ 
0182:  MOVF   2D,F
0183:  BTFSS  03.2
0184:  GOTO   1A3
....................                      lcd_gotoxy(8,2); 
0185:  MOVLW  08
0186:  MOVWF  31
0187:  MOVLW  02
0188:  MOVWF  32
0189:  CALL   097
....................                      lcd_putc(num[a]); 
018A:  MOVLW  21
018B:  ADDWF  2E,W
018C:  MOVWF  04
018D:  BCF    03.7
018E:  MOVF   00,W
018F:  MOVWF  2F
0190:  MOVWF  30
0191:  CALL   0A9
....................                      a++; 
0192:  INCF   2E,F
....................                      if(a==10){ 
0193:  MOVF   2E,W
0194:  SUBLW  0A
0195:  BTFSS  03.2
0196:  GOTO   198
....................                               a=0; 
0197:  CLRF   2E
....................                      } 
....................                      do{ 
....................                         sw2 = input(PIN_C7); 
0198:  BSF    20.7
0199:  MOVF   20,W
019A:  BSF    03.5
019B:  MOVWF  07
019C:  BCF    03.5
019D:  CLRF   2D
019E:  BTFSC  07.7
019F:  INCF   2D,F
....................                      }while(sw2==0); 
01A0:  MOVF   2D,F
01A1:  BTFSC  03.2
01A2:  GOTO   198
....................             } 
....................    } 
01A3:  GOTO   13D
.................... } 
01A4:  SLEEP

Configuration Fuses:
   Word  1: 393A   HS NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD WRT_50%
